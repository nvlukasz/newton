#usda 1.0
(
    customLayerData = {
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    doc = """Generated from Composed Stage of root layer /work/src/newton/cartpole_prototype.usd
"""
    endTimeCode = 100
    metersPerUnit = 1
    renderSettingsPrimPath = "/Render/OmniverseGlobalRenderSettings"
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

over "Flattened_Prototype_1"
{
    def Cube "mesh_0" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-0.02, -0.03, -0.5), (0.02, 0.03, 0.5)]
        rel material:binding = </Flattened_Prototype_1/Looks/material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.03999999910593033, 0.05999999865889549, 1)
        double3 xformOp:translate = (0, 0, 0.4699999988079071)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "material"
        {
            token outputs:mdl:displacement.connect = </Flattened_Prototype_1/Looks/material/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Flattened_Prototype_1/Looks/material/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Flattened_Prototype_1/Looks/material/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.5232067, 0.52320147, 0.52320147) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.12, 0.14, 0.29999998) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }
}

over "Flattened_Prototype_2"
{
    def Cube "mesh_0" (
        apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-0.015, -4, -0.015), (0.015, 4, 0.015)]
        uniform token purpose = "guide"
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.029999999329447746, 8, 0.029999999329447746)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Flattened_Prototype_3"
{
    def Cube "mesh_0" (
        apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-0.02, -0.03, -0.5), (0.02, 0.03, 0.5)]
        uniform token purpose = "guide"
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.03999999910593033, 0.05999999865889549, 1)
        double3 xformOp:translate = (0, 0, 0.4699999988079071)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Flattened_Prototype_4"
{
    def Cube "mesh_0" (
        apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-0.1, -0.125, -0.1), (0.1, 0.125, 0.1)]
        uniform token purpose = "guide"
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.20000000298023224, 0.25, 0.20000000298023224)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Flattened_Prototype_5"
{
    def Cube "mesh_0" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-0.015, -4, -0.015), (0.015, 4, 0.015)]
        rel material:binding = </Flattened_Prototype_5/Looks/material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.029999999329447746, 8, 0.029999999329447746)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "material"
        {
            token outputs:mdl:displacement.connect = </Flattened_Prototype_5/Looks/material/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Flattened_Prototype_5/Looks/material/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Flattened_Prototype_5/Looks/material/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (1, 0.99999, 0.99999) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.91999996, 0.59, 0.19999999) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }
}

over "Flattened_Prototype_6"
{
    def Cube "mesh_0" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-0.1, -0.125, -0.1), (0.1, 0.125, 0.1)]
        rel material:binding = </Flattened_Prototype_6/Looks/material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.20000000298023224, 0.25, 0.20000000298023224)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "material"
        {
            token outputs:mdl:displacement.connect = </Flattened_Prototype_6/Looks/material/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Flattened_Prototype_6/Looks/material/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Flattened_Prototype_6/Looks/material/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.47679323, 0.47678846, 0.47678846) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.35037118, 0.5060563, 0.6919831) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = """When enabled, this color value is multiplied over the final albedo color

"""
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }
}

def PhysicsScene "physicsScene" (
    apiSchemas = ["PhysxSceneAPI", "MaterialBindingAPI"]
)
{
    rel material:binding:physics = </physicsScene/defaultMaterial> (
        bindMaterialAs = "strongerThanDescendants"
    )
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    float physxScene:bounceThreshold = 0.5
    uniform token physxScene:broadphaseType = "GPU"
    bool physxScene:enableCCD = 0
    bool physxScene:enableEnhancedDeterminism = 0
    bool physxScene:enableGPUDynamics = 1
    bool physxScene:enableSceneQuerySupport = 0
    bool physxScene:enableStabilization = 1
    float physxScene:frictionCorrelationDistance = 0.025
    float physxScene:frictionOffsetThreshold = 0.04
    uint physxScene:gpuCollisionStackSize = 67108864
    uint physxScene:gpuFoundLostAggregatePairsCapacity = 33554432
    uint physxScene:gpuFoundLostPairsCapacity = 2097152
    uint physxScene:gpuHeapCapacity = 67108864
    uint physxScene:gpuMaxNumPartitions = 8
    uint physxScene:gpuMaxParticleContacts = 1048576
    uint physxScene:gpuMaxRigidContactCount = 8388608
    uint physxScene:gpuMaxRigidPatchCount = 163840
    uint physxScene:gpuMaxSoftBodyContacts = 1048576
    uint64 physxScene:gpuTempBufferCapacity = 16777216
    uint physxScene:gpuTotalAggregatePairsCapacity = 2097152
    uniform uint physxScene:maxPositionIterationCount = 255
    uniform uint physxScene:maxVelocityIterationCount = 255
    uniform uint physxScene:minPositionIterationCount = 1
    uniform uint physxScene:minVelocityIterationCount = 0
    uniform token physxScene:solverType = "TGS"
    uint physxScene:timeStepsPerSecond = 120

    def Material "defaultMaterial" (
        apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
    )
    {
        float physics:dynamicFriction = 0.5
        float physics:restitution = 0
        float physics:staticFriction = 0.5
        float physxMaterial:compliantContactDamping = 0
        float physxMaterial:compliantContactStiffness = 0
        uniform token physxMaterial:frictionCombineMode = "average"
        uniform token physxMaterial:restitutionCombineMode = "average"
    }
}

def "World"
{
    def Scope "envs"
    {
        def Xform "env_0"
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "Robot" (
                apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
            )
            {
                bool physxArticulation:enabledSelfCollisions = 0
                float physxArticulation:sleepThreshold = 0.005
                int physxArticulation:solverPositionIterationCount = 4
                int physxArticulation:solverVelocityIterationCount = 0
                float physxArticulation:stabilizationThreshold = 0.001
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Xform "slider" (
                    apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    bool physics:rigidBodyEnabled = 1
                    bool physxRigidBody:enableGyroscopicForces = 1
                    float physxRigidBody:maxAngularVelocity = 1000
                    float physxRigidBody:maxDepenetrationVelocity = 100
                    float physxRigidBody:maxLinearVelocity = 1000
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def "visuals" (
                        instanceable = true
                        add references = </Flattened_Prototype_5>
                    )
                    {
                    }

                    def "collisions" (
                        instanceable = true
                        add references = </Flattened_Prototype_2>
                    )
                    {
                    }

                    def PhysicsPrismaticJoint "slider_to_cart" (
                        apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:linear", "PhysicsDriveAPI:linear"]
                    )
                    {
                        float drive:linear:physics:damping = 0
                        float drive:linear:physics:maxForce = 1000
                        float drive:linear:physics:stiffness = 0
                        uniform token drive:linear:physics:type = "force"
                        uniform token physics:axis = "X"
                        rel physics:body0 = </World/envs/env_0/Robot/slider>
                        rel physics:body1 = </World/envs/env_0/Robot/cart>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0, 0, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
                        quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
                        float physics:lowerLimit = -4
                        float physics:upperLimit = 4
                        float physxJoint:jointFriction = 0
                        float physxJoint:maxJointVelocity = 100
                    }
                }

                def PhysicsFixedJoint "root_joint"
                {
                    rel physics:body1 = </World/envs/env_0/Robot/slider>
                }

                def Xform "cart" (
                    apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    float physics:mass = 1
                    bool physics:rigidBodyEnabled = 1
                    bool physxRigidBody:enableGyroscopicForces = 1
                    float physxRigidBody:maxAngularVelocity = 1000
                    float physxRigidBody:maxDepenetrationVelocity = 100
                    float physxRigidBody:maxLinearVelocity = 1000
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def "visuals" (
                        instanceable = true
                        add references = </Flattened_Prototype_6>
                    )
                    {
                    }

                    def "collisions" (
                        instanceable = true
                        add references = </Flattened_Prototype_4>
                    )
                    {
                    }

                    def PhysicsRevoluteJoint "cart_to_pole" (
                        apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
                    )
                    {
                        float drive:angular:physics:damping = 0
                        float drive:angular:physics:maxForce = 1000
                        float drive:angular:physics:stiffness = 0
                        uniform token drive:angular:physics:type = "force"
                        uniform token physics:axis = "X"
                        rel physics:body0 = </World/envs/env_0/Robot/cart>
                        rel physics:body1 = </World/envs/env_0/Robot/pole>
                        float physics:breakForce = 3.4028235e38
                        float physics:breakTorque = 3.4028235e38
                        point3f physics:localPos0 = (0.12, 0, 0)
                        point3f physics:localPos1 = (0, 0, 0)
                        quatf physics:localRot0 = (1, 0, 0, 0)
                        quatf physics:localRot1 = (1, 0, 0, 0)
                        float physxJoint:jointFriction = 0
                        float physxJoint:maxJointVelocity = 458.36624
                    }
                }

                def Xform "pole" (
                    apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0.47)
                    float physics:mass = 1
                    bool physics:rigidBodyEnabled = 1
                    bool physxRigidBody:enableGyroscopicForces = 1
                    float physxRigidBody:maxAngularVelocity = 1000
                    float physxRigidBody:maxDepenetrationVelocity = 100
                    float physxRigidBody:maxLinearVelocity = 1000
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.11999999731779099, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def "visuals" (
                        instanceable = true
                        add references = </Flattened_Prototype_1>
                    )
                    {
                    }

                    def "collisions" (
                        instanceable = true
                        add references = </Flattened_Prototype_3>
                    )
                    {
                    }
                }
            }
        }
    }

    def Xform "ground" (
        kind = "component"
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Scope "Looks" (
            kind = ""
        )
        {
            def Material "theGrid"
            {
                token outputs:mdl:displacement.connect = </World/ground/Looks/theGrid/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/ground/Looks/theGrid/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/ground/Looks/theGrid/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = "This is the albedo base color"
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:diffuse_texture = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Grid/Materials/Textures/Wireframe_blue.png@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    color3f inputs:diffuse_tint = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:emissive_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:emissive_color_texture = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Grid/Materials/Textures/WireframeBlur_basecolor.png@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:emissive_intensity = 1000 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Grid/Materials/Textures/WireframeBlur_blue.png@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:enable_emission = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:project_uvw = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    bool inputs:world_or_object = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When enabled, uses world space for projection, otherwise object space is used"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        def Xform "GroundPlane"
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Plane "CollisionPlane" (
                apiSchemas = ["MaterialBindingAPI", "PhysicsCollisionAPI"]
            )
            {
                uniform token axis = "Z"
                rel material:binding:physics = </World/ground/physicsMaterial> (
                    bindMaterialAs = "strongerThanDescendants"
                )
                uniform token purpose = "guide"
                float3 xformOp:scale = (0.01, 0.01, 0.01)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def SphereLight "SphereLight" (
            apiSchemas = ["ShapingAPI"]
        )
        {
            float inputs:intensity = 100000
            float inputs:radius = 0.25
            float inputs:shaping:cone:angle = 180
            float intensity = 100000
            float radius = 0.25
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            token visibility = "invisible"
            quatd xformOp:orient = (0.5000000000000001, 0.5, 0.49999999999999994, 0.5)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 2.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Xform "Environment" (
            apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/ground/Looks/theGrid> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "inherited"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

            def Mesh "Geometry" (
                apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
                int[] faceVertexCounts = [4]
                int[] faceVertexIndices = [0, 1, 3, 2]
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                token visibility = "inherited"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (100, 100, 1)
                double3 xformOp:translate = (-0.425, 0.425, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Material "physicsMaterial" (
            apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5
            float physxMaterial:compliantContactDamping = 0
            float physxMaterial:compliantContactStiffness = 0
            uniform token physxMaterial:frictionCombineMode = "average"
            uniform token physxMaterial:restitutionCombineMode = "average"
        }
    }

    def DomeLight "Light"
    {
        color3f inputs:color = (0.75, 0.75, 0.75)
        float inputs:colorTemperature = 6500
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 2000
        bool inputs:normalize = 0
        asset inputs:texture:file
        token inputs:texture:format = "automatic"
        bool visibleInPrimaryRay = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def Camera "OmniverseKit_Persp" (
    customData = {
        dictionary omni = {
            dictionary kit = {
                bool hide_in_stage_window = 1
                bool no_delete = 1
            }
        }
    }
    hide_in_stage_window = true
    kind = "component"
    no_delete = true
)
{
    float2 clippingRange = (1, 10000000)
    float focalLength = 18.147562
    float focusDistance = 400
    custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -96.46236999354045)
    float3 xformOp:rotateXYZ = (54.73561, -6.3611094e-15, 135)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (55.74297572387726, 55.69257572553425, 58.162574395058954)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def Camera "OmniverseKit_Front" (
    customData = {
        dictionary omni = {
            dictionary kit = {
                bool hide_in_stage_window = 1
                bool no_delete = 1
            }
        }
    }
    hide_in_stage_window = true
    kind = "component"
    no_delete = true
)
{
    float2 clippingRange = (1, 10000000)
    float horizontalAperture = 5000
    custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -500)
    token projection = "orthographic"
    float verticalAperture = 5000
    float3 xformOp:rotateXYZ = (90, -1.2722219e-14, 90)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (500, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def Camera "OmniverseKit_Top" (
    customData = {
        dictionary omni = {
            dictionary kit = {
                bool hide_in_stage_window = 1
                bool no_delete = 1
            }
        }
    }
    hide_in_stage_window = true
    kind = "component"
    no_delete = true
)
{
    float2 clippingRange = (1, 10000000)
    float horizontalAperture = 5000
    custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -500)
    token projection = "orthographic"
    float verticalAperture = 5000
    float3 xformOp:rotateXYZ = (-1.2722219e-14, -7.016709e-15, -90)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 500)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def Camera "OmniverseKit_Right" (
    customData = {
        dictionary omni = {
            dictionary kit = {
                bool hide_in_stage_window = 1
                bool no_delete = 1
            }
        }
    }
    hide_in_stage_window = true
    kind = "component"
    no_delete = true
)
{
    float2 clippingRange = (1, 10000000)
    float horizontalAperture = 5000
    custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -500)
    token projection = "orthographic"
    float verticalAperture = 5000
    float3 xformOp:rotateXYZ = (90, -1.41245e-30, 1.2722219e-14)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, -500, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def "Render" (
    hide_in_stage_window = true
    no_delete = true
)
{
    def "OmniverseKit"
    {
        def "HydraTextures" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            def RenderProduct "omni_kit_widget_viewport_ViewportTexture_0" (
                hide_in_stage_window = true
                no_delete = true
            )
            {
                rel camera = </OmniverseKit_Persp>
                rel orderedVars = </Render/Vars/LdrColor>
                custom bool overrideClipRange = 0
                uniform int2 resolution = (1280, 720)
                custom uint64 viewPickingId = 706153192698425
                custom int viewportHandle = 0
            }
        }
    }

    def RenderSettings "OmniverseGlobalRenderSettings" (
        hide_in_stage_window = true
        no_delete = true
    )
    {
        rel products = </Render/OmniverseKit/HydraTextures/omni_kit_widget_viewport_ViewportTexture_0>
    }

    def "Vars"
    {
        def RenderVar "LdrColor" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            uniform string sourceName = "LdrColor"
        }
    }
}

